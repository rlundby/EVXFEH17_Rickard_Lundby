
/* Mixin for Centering*/
@mixin center($position) {
    position: absolute;
    
    @if $position == 'vertical' {
      top: 50%;
      -webkit-transform: translateY(-50%);
      -ms-transform: translateY(-50%);
      transform: translateY(-50%);
    }
    @else if $position == 'horizontal' {
      left: 50%;
      -webkit-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
      transform: translate(-50%);
    }
    @else if $position == 'both' {
      top: 50%;
      left: 50%;
      -webkit-transform: translate(-50%, -50%);
      -ms-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
    }
  }

// Mixin for Gradients //
@mixin background-gradient($start-color, $end-color, $orientation) { 
    background: $start-color;

    @if $orientation == 'vertical' {
      background: -webkit-linear-gradient(top, $start-color, $end-color);
      background: linear-gradient(to bottom, $start-color, $end-color);
    } @else if $orientation == 'horizontal' {
      background: -webkit-linear-gradient(left, $start-color, $end-color);
      background: linear-gradient(to right, $start-color, $end-color);
    } @else {
      background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
      background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

// Mixin for Reponsive Background //

@mixin page-bg ($imagepath, $bgrepeat: no-repeat, $bg-attachment: fixed) {
 color: map-get ($color: primarycolor);
 background: map-get ($color: mainred);
 background-image: url ($imagepath);
 background-repeat: $bgrepeat;
 background-attachment: $bg-attachment;
 background-size: $bg-size;
}

// Solid border //
@mixin solidborder ($size, $color,$solid: solid ){
    border: $size $solid $color;
}

// Media Query //
@mixin respond-to($breakpoint) {
 
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

